package mines;

import java.io.IOException;
import java.util.Random;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class MinesFX extends Application {
	private Mines mine;
	private Button buttons[][]; //for the grid button
	private int height, width, minesNumber;
	private GridPane grid;
	private Random random = new Random(); //for adding mines randomly 
	private boolean emptyGrid,gameOver;
	private MyController control;
	private Stage stage;

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage stage) throws Exception {
		HBox hBox;
		/*loading fxml file*/
		try 
		{ 
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("Stage.fxml"));
			hBox = loader.load();
			control = loader.getController(); //saving controller class
			this.stage = stage; //could be different stages
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			return;
		}
		
		Scene scene = new Scene(hBox);
		stage.setScene(scene);
		stage.setTitle("Stage");
		stage.show();
		emptyGrid = true;
		/*getting the reset button and setting handler for it*/
		Button reset = control.getResetButton(); 
		reset.setOnAction(new Reset(control, hBox));
		
		stage.setMinHeight(400);
		stage.setMinWidth(600);
		
	}
/*Creates buttons for the game*/
	public GridPane MineGrid(int height,int width) 
	{
		GridPane gPane = new GridPane();
		
		for (int i = 0 ;i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{ 
				buttons[i][j] = new Button(mine.get(i, j));
				Button tempButtom=buttons[i][j];
				/*button sizes*/
				tempButtom.setPrefSize(45, 45); 
				tempButtom.setMaxSize(50, 50); 
				tempButtom.setMinSize(45, 45);
				
				tempButtom.setOnMouseClicked(new ButtonClick(i,j)); //setting mouse event handler for each button 
				tempButtom.setFont(new Font("David",18));
				gPane.add(tempButtom, i, j); //adding button to grid
			}	
		}
		gPane.setPadding(new Insets(50));
		//adding mines randomly
		for (int i = 0 ; i < minesNumber ; i++)
			{
				mine.addMine(random.nextInt(height), random.nextInt(width));
			}
		return gPane;

	}

	 class Reset implements EventHandler<ActionEvent> //listener to reset button
	 {
		 private MyController mc;
		 private HBox root;
		 public Reset(MyController c,HBox root)
		 {
			 this.mc=c;
			 this.root=root;
		 }

		@Override
		 /*Makes a new table with the parameters that have been inserted into the boxes*/
		public void handle(ActionEvent event) 
		{
			if (emptyGrid == false) //if the grid isn't empty
			{
				root.getChildren().remove(grid); //remove the old grid
			}
			
			emptyGrid = false;
			gameOver = false;
			height = mc.getHeight(); //Read the height from the box containing the height
			width = mc.getWidth(); //Read the width from the box containing the width
			minesNumber = mc.getMines(); //Read the num of mines from the box containing the mines
			
			/*checks if all the parameters have been inserted- if not, it will be empty*/
			if (height == 0 || width == 0 || minesNumber == 0) 
				return; 
			
			mine = new Mines(height, width, minesNumber);
			buttons = new Button[height][width];
			grid = MineGrid(height,width);
			stage.setWidth(width*60 + 100);
			stage.setHeight(height*50 + 100);
			root.getChildren().add(grid);			

		}

	 }

	 class ButtonClick implements EventHandler<MouseEvent>
	 {
		 private int x,y;
		 
		 public ButtonClick(int x,int y)
		 {
			 this.x=x; 
			 this.y=y;
		 }

		@Override
		public void handle(MouseEvent click) 
		{
			MouseButton mButton = click.getButton();
			
			if (mButton == MouseButton.SECONDARY) //it's a right click
			{
				mine.toggleFlag(x, y);
				buttons[x][y].setText(mine.get(x, y));
				
				if (mine.isDone())//if the game is done - all the not mines places are open
				{
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Win");
					alert.setHeaderText(null);
					alert.setContentText("YOU WIN!!");
					if (!gameOver) // will not show massage after the game is over
						alert.show();
					gameOver = true;
				}
			}
			
			else if (mButton == MouseButton.PRIMARY && mine.get(x, y)!="F") //it's a left click + without flag
			{
				if (!mine.isDone())//if the game isn't done
				{
					if(!mine.open(x, y))
					{
						mine.setShowAll(true);
						Alert alert = new Alert(AlertType.INFORMATION);
						alert.setTitle("Lose");
						alert.setHeaderText(null);
						alert.setContentText("OOPS.. IT'S A MINE!!");
						if (!gameOver) //will not show massage after game over
							alert.show();
						gameOver = true;
					}
				}

				else //if the game is done - all the not mines places are open
				{
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Win");
					alert.setHeaderText(null);
					alert.setContentText("YOU WIN!!");
					if (!gameOver) // will not show massage after the game is over
						alert.show();
					gameOver = true;
				}
				
				for (int i = 0 ; i < control.getHeight() ; i++)
				{
					for (int j = 0; j < control.getWidth(); j++)
					{
						buttons[i][j].setText(mine.get(i, j));
					}
				}	
			}	
		}
	 }
}



